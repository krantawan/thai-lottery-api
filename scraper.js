import puppeteer from 'puppeteer';
import cron from 'node-cron';
import dotenv from 'dotenv';
import { PrismaClient } from '@prisma/client';

dotenv.config();

const prisma = new PrismaClient();
const URL = process.env.LOTTERY_URL;

export async function fetchLotteryResults() {
  console.log('‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏ß‡πá‡∏ö‡∏ú‡πà‡∏≤‡∏ô Puppeteer...');
  const browser = await puppeteer.launch({
    headless: true,
    args: ['--no-sandbox', '--disable-setuid-sandbox'],
  });

  const page = await browser.newPage();
  await page.goto(URL, { waitUntil: 'networkidle2' });

  const result = await page.evaluate(() => {
    const getText = (selector) => {
      const el = document.querySelector(selector);
      return el ? el.textContent.trim() : '';
    };

    const getMultiple = (selector) => {
      return [...document.querySelectorAll(selector)].map((el) =>
        el.textContent.trim()
      );
    };

    const rawDateText = document.querySelector('h2.topic')?.textContent || '';
    const match = rawDateText.match(/(\d{1,2})\s(\S+)\s(\d{4})/);
    let parsedDate = '';
    if (match) {
      const [_, day, monthThai, yearThai] = match;
      const monthMap = {
        ‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°: '01',
        ‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå: '02',
        ‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°: '03',
        ‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô: '04',
        ‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°: '05',
        ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô: '06',
        ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°: '07',
        ‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°: '08',
        ‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô: '09',
        ‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°: '10',
        ‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô: '11',
        ‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°: '12',
      };
      const month = monthMap[monthThai] || '01';
      const year = (parseInt(yearThai) - 543).toString();
      parsedDate = `${year}-${month}-${day.padStart(2, '0')}`;
    }

    return {
      date: parsedDate,
      firstPrize: getText('.award1 .award-number p'),
      nearFirst: getMultiple('.award-near1 .award-number-nomal.--first p'),
      front3Digits: getMultiple('.award-3first .award-number p'),
      last3Digits: getMultiple('.award-3last .award-number p'),
      last2Digits: getText('.award-2last .award-number p'),
      secondPrize: getMultiple('.award2 .award-number-nomal p'),
      thirdPrize: getMultiple(
        '.award3 .award-number-nomal-list .box-list p'
      ),
      fourthPrize: getMultiple(
        '.award4 .award-number-nomal-list .box-list p'
      ),
      fifthPrize: getMultiple(
        '.award5 .award-number-nomal-list .box-list p'
      ),
    };
  });

  //console.log('üéØ ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', result);
  console.log('üéØ ‡∏î‡∏∂‡∏á‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

  try {
    const parsedDate = new Date(result.date);

    const existing = await prisma.lotteryResult.findUnique({
      where: { date: parsedDate },
    });

    if (existing) {
      console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${result.date} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`);
    } else {
      await prisma.lotteryResult.create({
        data: {
          date: parsedDate,
          firstPrize: result.firstPrize,
          nearFirst: result.nearFirst,
          front3Digits: result.front3Digits,
          last3Digits: result.last3Digits,
          last2Digits: result.last2Digits,
          secondPrize: result.secondPrize,
          thirdPrize: result.thirdPrize,
          fourthPrize: result.fourthPrize,
          fifthPrize: result.fifthPrize,
        },
      });
      console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${result.date} ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`);
    }
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å:', error);
  } finally {
    await browser.close();
    await prisma.$disconnect();
  }
}

fetchLotteryResults();
cron.schedule('*/5 * * * *', fetchLotteryResults);
